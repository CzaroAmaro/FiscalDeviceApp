# Generated by Django 5.2 on 2025-10-23 18:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa firmy/Imię i nazwisko')),
                ('address', models.CharField(max_length=255, verbose_name='Adres')),
                ('nip', models.CharField(max_length=10, unique=True, verbose_name='NIP')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Numer telefonu')),
                ('email', models.EmailField(blank=True, max_length=100, verbose_name='Adres e-mail')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data dodania')),
                ('regon', models.CharField(blank=True, max_length=14, verbose_name='REGON')),
            ],
            options={
                'verbose_name': 'Klient',
                'verbose_name_plural': 'Klienci',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nazwa producenta')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FiscalDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=100, verbose_name='Model urządzenia')),
                ('unique_number', models.CharField(max_length=100, null=True, unique=True, verbose_name='Numer unikatowy')),
                ('serial_number', models.CharField(max_length=100, verbose_name='Numer seryjny')),
                ('sale_date', models.DateField(verbose_name='Data sprzedaży')),
                ('last_service_date', models.DateField(blank=True, null=True, verbose_name='Data ostatniego przeglądu')),
                ('status', models.CharField(choices=[('active', 'Aktywna'), ('inactive', 'Niewykorzystywana'), ('serviced', 'W serwisie'), ('decommissioned', 'Wycofana')], default='active', max_length=20, verbose_name='Status')),
                ('operating_instructions', models.TextField(blank=True, verbose_name='Sposób użytkowania')),
                ('remarks', models.TextField(blank=True, verbose_name='Uwagi')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='api.client', verbose_name='Właściciel')),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.manufacturer', verbose_name='Marka/Producent')),
            ],
            options={
                'verbose_name': 'Urządzenie fiskalne',
                'verbose_name_plural': 'Urządzenia fiskalne',
                'ordering': ['-last_service_date'],
            },
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Telefon służbowy')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktywny')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='technician_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Serwisant',
                'verbose_name_plural': 'Serwisanci',
            },
        ),
        migrations.CreateModel(
            name='ServiceTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Numer zgłoszenia')),
                ('title', models.CharField(max_length=255, verbose_name='Tytuł zgłoszenia')),
                ('description', models.TextField(verbose_name='Opis zgłoszenia')),
                ('ticket_type', models.CharField(choices=[('service', 'Przegląd'), ('reading', 'Odczyt'), ('repair', 'Naprawa'), ('other', 'Inne')], max_length=20)),
                ('status', models.CharField(choices=[('open', 'Otwarte'), ('in_progress', 'W toku'), ('closed', 'Zamknięte')], default='open', max_length=20)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True, verbose_name='Zaplanowano na')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Data ukończenia')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notatki z wykonania / Rozwiązanie')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='api.client')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='api.fiscaldevice')),
                ('assigned_technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='api.technician')),
            ],
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_number', models.CharField(max_length=100, verbose_name='Numer legitymacji/certyfikatu')),
                ('issue_date', models.DateField(verbose_name='Data wydania')),
                ('expiry_date', models.DateField(verbose_name='Data ważności')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certified_technicians', to='api.manufacturer')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='api.technician')),
            ],
            options={
                'unique_together': {('technician', 'manufacturer', 'certificate_number')},
            },
        ),
    ]
